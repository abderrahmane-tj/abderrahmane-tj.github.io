---
name: PNPM Setup & Install
description: Sets up Node, PNPM and installs dependencies and with caching

inputs:
  node-version:
    description: Node version to install
    required: false
    default: 18.x
  install-params:
    description: Parameters to pass into `pnpm install`
    required: false
    default: "--frozen-lockfile"
  install-dir:
    description: Directory to run `pnpm install` inside
    required: false
    default: ./

runs:
  using: composite

  steps:
    # Set up node
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}

    # Enables corepack, which is a nodejs builtin that installs package managers as they're needed
    # https://nodejs.org/dist/latest-v14.x/docs/api/corepack.html
    - run: corepack enable
      shell: bash

    - name: find pnpm cache path
      id: cache
      shell: bash
      run: echo "pnpm_cache_path=$(pnpm store path)" >> $GITHUB_OUTPUT

    # Cache dependencies manually
    - uses: actions/cache@v3
      with:
        path: |
          .next/cache
          ${{ steps.cache.outputs.pnpm_cache_path }}
        key: pnpm-v1-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          pnpm-v1-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-

    # Finally install the dependencies
    - name: Install dependencies
      shell: bash
      run: pnpm install ${{ inputs.install-params }}
      working-directory: ${{ inputs.install-dir }}
      env:
        # This makes sure we install _all_ dependencies, even if NODE_ENV is set to `production`
        NODE_ENV: development

